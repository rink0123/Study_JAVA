package Operators;

/**
 * <h3>연산자 요약(Summary of Operators)</h3>
 * 
 * <h4>참고 사이트</h4>
 * <ul>
 * <li><a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/opsummary.html">
 * Java Tutorials > Language Basics > Operators > Summary of Operators</a></li>
 * </ul>
 * 
 * @since JDK 11
 * @version 1.0.0.RELEASE
 * @author 강민성
 */
public class SummaryOperators {
	/*
	 * 할당 연산자(Assignment Operators)
	 * =       왼쪽의 피연산자에 오른쪽의 피연산자를 대입함.
	 * +=      왼쪽의 피연산자에 오른쪽의 피연산자를 더한 후, 그 결괏값을 왼쪽의 피연산자에 대입함.
     * -=      왼쪽의 피연산자에서 오른쪽의 피연산자를 뺀 후, 그 결괏값을 왼쪽의 피연산자에 대입함.
     * *=      왼쪽의 피연산자에 오른쪽의 피연산자를 곱한 후, 그 결괏값을 왼쪽의 피연산자에 대입함.
     * /=      왼쪽의 피연산자를 오른쪽의 피연산자로 나눈 후, 그 결괏값을 왼쪽의 피연산자에 대입함.
     * %=      왼쪽의 피연산자를 오른쪽의 피연산자로 나눈 후, 그 나머지를 왼쪽의 피연산자에 대입함.
     * &=      왼쪽의 피연산자를 오른쪽의 피연산자와 비트 AND 연산한 후, 그 결괏값을 왼쪽의 피연산자에 대입함.
     * |=      왼쪽의 피연산자를 오른쪽의 피연산자와 비트 OR 연산한 후, 그 결괏값을 왼쪽의 피연산자에 대입함.
     * ^=      왼쪽의 피연산자를 오른쪽의 피연산자와 비트 XOR 연산한 후, 그 결괏값을 왼쪽의 피연산자에 대입함.
     * <<=     왼쪽의 피연산자를 오른쪽의 피연산자만큼 왼쪽 시프트한 후, 그 결괏값을 왼쪽의 피연산자에 대입함.
     * >>=     왼쪽의 피연산자를 오른쪽의 피연산자만큼 부호를 유지하며 오른쪽 시프트한 후, 그 결괏값을 왼쪽의 피연산자에 대입함.
     * >>>=    왼쪽의 피연산자를 오른쪽의 피연산자만큼 부호에 상관없이 오른쪽 시프트한 후, 그 결괏값을 왼쪽의 피연산자에 대입함.
	 * 
	 * 산술 연산자(Arithmetic Operators)
	 * +       왼쪽의 피연산자에 오른쪽의 피연산자를 더함(or 문자열 연결).
	 * -       왼쪽의 피연산자에서 오른쪽의 피연산자를 뺌.
	 * *       왼쪽의 피연산자에 오른쪽의 피연산자를 곱함.
	 * /       왼쪽의 피연산자를 오른쪽의 피연산자로 나눔.
	 * %       왼쪽의 피연산자를 오른쪽의 피연산자로 나눈 후, 그 나머지를 반환함.
	 * 
	 * 단항 연산자(Unary Operators)
	 * +       양수 값임을 표시(기본값, 생략 가능).
	 * -       음수 값임을 표시.
	 * ++      값을 1씩 증가시킨다.
	 * --      값을 1씩 감소시킨다.
	 * !       논리식의 결과가 true이면 false를, false이면 true를 반환함(논리 NOT 연산).
	 * 
	 * 비교 연산자(Equality and Relational Operators)
	 * ==      왼쪽의 피연산자와 오른쪽의 피연산자가 같으면 true를 반환함.
	 * !=      왼쪽의 피연산자와 오른쪽의 피연산자가 같지 않으면 true를 반환함.
	 * >       왼쪽의 피연산자가 오른쪽의 피연산자보다 크면 true를 반환함.
	 * >=      왼쪽의 피연산자가 오른쪽의 피연산자보다 크거나 같으면 true를 반환함.
	 * <       왼쪽의 피연산자가 오른쪽의 피연산자보다 작으면 true를 반환함.
	 * <=      왼쪽의 피연산자가 오른쪽의 피연산자보다 작거나 같으면 true를 반환함.
	 * 
	 * 조건부 연산자(Conditional Operators)
	 * &&      논리식이 모두 참이면 참을 반환함 (논리 AND 연산).
	 * ||      논리식 중에서 하나라도 참이면 참을 반환함(논리 OR 연산).
	 * ? 값1 : 값2     ? 앞의 조건식에 따라 결과값이 true이면 값1을 반환, false이면 값2를 반환.
	 * 
	 * 유형 비교 연산자(Type Comparison Operator)
	 * instanceof      객체를 지정한 유형과 비교.
	 * 
	 * 비트 연산자(Bitwise and Bit Shift Operators)
	 * ~       비트를 1이면 0으로, 0이면 1로 반전시킴(비트 NOT 연산, 1의 보수).
	 * <<      명시된 수만큼 비트들을 전부 왼쪽으로 이동시킴(left shift 연산).
	 * >>      부호를 유지하면서 지정한 수만큼 비트를 전부 오른쪽으로 이동시킴(right shift 연산).
	 * >>>     지정한 수만큼 비트를 전부 오른쪽으로 이동시키며, 새로운 비트는 전부 0이 됨.
	 * &       대응되는 비트가 모두 1이면 1을 반환함(비트 AND 연산).
	 * ^       대응되는 비트가 서로 다르면 1을 반환함(비트 XOR 연산).
	 * |       대응되는 비트 중에서 하나라도 1이면 1을 반환함(비트 OR 연산).
	 */
}
